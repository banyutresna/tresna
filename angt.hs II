-- First Assignment
-- Reimplement Haskell function
-- DON'T USE GOOGLE
module Angt where

import Data.List

-- 1.a

null' x
  | x == [] = True
  | otherwise = False

--pembatas

take' _ [] = []
take' 0 (x:xs) = []
take' e (x:xs) = x : take' (e-1) xs

--pembatas

drop' 0 (x:xs) = x:xs
drop' e [] = []
drop' e (x:xs) = drop' (e-1) xs
--drop' 3 [2,23,1,2312,1] = []
--drop 2 [23,1,2312,1] = [2312,1]

--pembatas

fst' (x,y) = x

--pembatas

snd' (x,y) = y

--pembatas

map' (r) [] = []
--map' (x:xs)

--pembatas

filter' x = x

--pembatas

delete' _ [] = []
delete' e (x:xs)
  | x /= e = x : delete' e xs
  | x == e = xs

--d 2 [2 3 4 2 2]
--d 1 [3 4 2 2]
--d 0 [4 2 2]
--[4 2 2]

--pembatas

deleteAll' x = x

--pembatas

foldl' x = x

--pembatas

foldl1' x = x

--pembatas

zip' [] [] = []
zip' (x:xs) [] = []
zip' [] (y:ys) = []
zip' (x:xs) (y:ys) = [(x,y)] ++ (zip' xs ys)

--pembatas

zipWith' x = x

--pembatas

nth' [x] d = x

--pembatas

scanl' x = x

--pembatas

scanl1' x = x

--pembatas

elem' x = x

--pembatas

notElem' x = x

--pembatas

head' (x:xs) = x

--pembatas

length' [] = 0
length' [x] = 1
length' (x:xs) = 1 + length' xs

--pembatas

--reverse' [] = []
--reverse' [x] = [x]
--reverse' (x:xs) = reverse' xs

--pembatas

last' [x] = x
last' (x:xs) = last' xs

--pembatas

tail' (x:xs) = xs

--pembatas

init' [x] = []
init' (x:xs) = x : init' xs

--pembatas

max' x y
  | x >= y = x
  | otherwise = y

--pembatas

min' x y
  | x >= y = y
  | otherwise = x

--pembatas

concat' [] = []
concat' [x:xs] = x:xs

--pembatas

intersperse' 0 [] = []
intersperse' _ [x] = [x]
--intersperse' d (x:xs) =

--pembatas

intercalate' x = x

--pembatas

and' [] = True
and' (x:xs)
  | x == False = False
  | x /= False = and' xs

--pembatas

or' [] = False
or' (x:xs)
  | x == True = True
  | x /= True = or' xs

--pembatas

zip3' x = x

--pembatas

sum' [] = 0
sum' (x:[]) = x
sum' (x:xs) = x + sum' xs

--pembatas

product' [] = 1
product' (x:[]) = x
product' (x:xs) = x * product' xs

--pembatas

words' x = x

--pembatas

lines' x = x

--pembatas

unlines' x = x

--pembatas

unwords' [] = ""
--unwords'

--pembatas

takeWhile' x = x

--pembatas

dropWhile' x = x

--pembatas

concatMap' x = x

--pembatas

all' x = x

--pembatas

any' x = x

--pembatas

insert' h [] = [h]
--insert' h (x:xs) = xs

--pembatas

zipWith3' x = x

--pembatas

-- 1.b

nub' (x:xs) = (x:xs)

--pembatas

sort' x = x

--pembatas

minimum' [x] = x

--pembatas

maximum' [x] = x

--pembatas

inits' x = x

--pembatas

tails' x = x

--pembatas

union' x = x

--pembatas

intersect' x = x

--pembatas

group' x = x

--pembatas

splitAt' x = x

--pembatas

partition' x = x

--pembatas

replicate' 0 0 = []
--replicate' d j = d : replicate' j

--pembatas
-- First Assignment
-- Reimplement Haskell function
-- DON'T USE GOOGLE
